# Haxe compiler Makefile
#
#  - use 'make' to build all
#  - use 'make haxe' to build only the compiler (not the libraries)
#  - if you want to build quickly, install 'ocamlopt.opt' and change OCAMLOPT=ocamlopt.top
#
#  Windows users :
#  - use 'make -f Makefile.win' to build for Windows
#  - use 'make MSVC=1 -f Makefile.win' to build for Windows with OCaml/MSVC
#
.SUFFIXES : .ml .mli .cmo .cmi .cmx .mll .mly

INSTALL_DIR=/usr

OUTPUT=haxe
EXTENSION=
OCAMLC=ocamlc

CFLAGS= -g -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib

CC_CMD = $(OCAMLC) $(CFLAGS) -c $<
CC_PARSER_CMD = $(OCAMLC) -pp camlp4o $(CFLAGS) -c parser.ml

LIBS=unix.cma str.cma libs/extlib/extLib.cma libs/xml-light/xml-light.cma libs/swflib/swflib.cma \
	libs/extc/extc.cma libs/neko/neko.cma libs/javalib/java.cma libs/ziplib/zip.cma libs/ttflib/ttf.cma

NATIVE_LIBS=-cclib libs/extc/extc_stubs.o -cclib -lz

RELDIR=../../..

EXPORT=../../../projects/motionTools/haxe

MODULES=ast type lexer common genxml parser typecore optimizer typeload \
codegen gencommon genas3 gencpp genjs genneko genphp genswf8 \
	genswf9 genswf genjava gencs interp typer matcher dce main

export HAXE_STD_PATH=$(CURDIR)/std

all: libs haxe

libs:
	make -C libs/extlib bytecode
	make -C libs/extc bytecode
	make -C libs/neko bytecode
	make -C libs/javalib bytecode
	make -C libs/ziplib bytecode
	make -C libs/swflib byte
	make -C libs/xml-light xml-light.cma
	make -C libs/ttflib byte

haxe: haxe.cma	

haxe.cma: $(MODULES:=.cmo)
	$(OCAMLC) -o haxe.cma -a $(CFLAGS) $(NATIVE_LIBS) $(LIBS)  $(MODULES:=.cmo)
	
haxelib:
	$(CURDIR)/$(OUTPUT) --cwd "$(CURDIR)/std/tools/haxelib" haxelib.hxml
	cp std/tools/haxelib/haxelib$(EXTENSION) haxelib$(EXTENSION)

haxedoc:
	$(CURDIR)/$(OUTPUT) --cwd "$(CURDIR)/std/tools/haxedoc" haxedoc.hxml
	cp std/tools/haxedoc/haxedoc$(EXTENSION) haxedoc$(EXTENSION)

tools: haxelib haxedoc

install:
	cp haxe $(INSTALL_DIR)/bin/haxe
	rm -rf $(INSTALL_DIR)/lib/haxe/std
	-mkdir -p $(INSTALL_DIR)/lib/haxe
	cp -rf std $(INSTALL_DIR)/lib/haxe/std
	-mkdir -p $(INSTALL_DIR)/lib/haxe/lib
	chmod -R a+rx $(INSTALL_DIR)/lib/haxe
	chmod 777 $(INSTALL_DIR)/lib/haxe/lib
	cp std/tools/haxelib/haxelib.sh $(INSTALL_DIR)/bin/haxelib
	cp std/tools/haxedoc/haxedoc.sh $(INSTALL_DIR)/bin/haxedoc
	chmod a+rx $(INSTALL_DIR)/bin/haxe $(INSTALL_DIR)/bin/haxelib $(INSTALL_DIR)/bin/haxedoc

# will install native version of the tools instead of script ones
install_tools: tools
	cp haxelib ${INSTALL_DIR}/bin/haxelib
	cp haxedoc ${INSTALL_DIR}/bin/haxedoc
	chmod a+rx $(INSTALL_DIR)/bin/haxelib $(INSTALL_DIR)/bin/haxedoc

uninstall:
	rm -rf $(INSTALL_DIR)/bin/haxe $(INSTALL_DIR)/bin/haxelib $(INSTALL_DIR)/lib/haxe

export:
	cp haxe*.exe doc/CHANGES.txt $(EXPORT)
	rsync -a --exclude .svn --exclude *.n --exclude std/libs --delete std $(EXPORT)

codegen.cmo: optimizer.cmo typeload.cmo typecore.cmo type.cmo genxml.cmo common.cmo ast.cmo

common.cmo: type.cmo ast.cmo

dce.cmo: ast.cmo common.cmo type.cmo

genas3.cmo: type.cmo common.cmo codegen.cmo ast.cmo

gencommon.cmo: type.cmo common.cmo codegen.cmo ast.cmo

gencpp.cmo: type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo

gencs.cmo: type.cmo lexer.cmo gencommon.cmo common.cmo codegen.cmo ast.cmo

genjava.cmo: type.cmo gencommon.cmo common.cmo codegen.cmo ast.cmo

genjs.cmo: type.cmo optimizer.cmo lexer.cmo common.cmo codegen.cmo ast.cmo

genneko.cmo: type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo

genphp.cmo: type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo

genswf.cmo: type.cmo genswf9.cmo genswf8.cmo common.cmo ast.cmo

genswf8.cmo: type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo

genswf9.cmo: type.cmo lexer.cmo genswf8.cmo common.cmo codegen.cmo ast.cmo

genxml.cmo: type.cmo lexer.cmo common.cmo ast.cmo

interp.cmo: typecore.cmo type.cmo lexer.cmo genneko.cmo common.cmo codegen.cmo ast.cmo genswf.cmo parser.cmo

matcher.cmo: optimizer.cmo codegen.cmo typecore.cmo type.cmo typer.cmo common.cmo ast.cmo

main.cmo: dce.cmo matcher.cmo typer.cmo typeload.cmo typecore.cmo type.cmo parser.cmo optimizer.cmo lexer.cmo interp.cmo genxml.cmo genswf.cmo genphp.cmo genneko.cmo genjs.cmo gencpp.cmo genas3.cmo common.cmo codegen.cmo ast.cmo gencommon.cmo genjava.cmo gencs.cmo

optimizer.cmo: typecore.cmo type.cmo parser.cmo common.cmo ast.cmo

parser.cmo: parser.ml lexer.cmo common.cmo ast.cmo
	$(CC_PARSER_CMD)

type.cmo: ast.cmo

typecore.cmo: type.cmo common.cmo ast.cmo

typeload.cmo: typecore.cmo type.cmo parser.cmo optimizer.cmo lexer.cmo common.cmo ast.cmo

typer.cmo: typeload.cmo typecore.cmo type.cmo parser.cmo optimizer.cmo lexer.cmo interp.cmo genneko.cmo genjs.cmo common.cmo codegen.cmo ast.cmo

lexer.cmo: lexer.ml

lexer.cmo: ast.cmo

clean: clean_libs clean_haxe clean_tools

clean_libs:
	make -C libs/extlib clean
	make -C libs/extc clean
	make -C libs/neko clean
	make -C libs/ziplib clean
	make -C libs/javalib clean
	make -C libs/swflib clean
	make -C libs/xml-light clean
	make -C libs/ttflib clean

clean_haxe:
	rm -f $(MODULES:=.obj) $(MODULES:=.o) $(MODULES:=.cmx) $(MODULES:=.cmo) $(MODULES:=.cmi) lexer.ml

clean_tools:
	rm -f $(OUTPUT) haxelib haxedoc

# SUFFIXES
	
.ml.cmo:
	$(CC_CMD)

.mli.cmi:
	$(CC_CMD)

.mll.ml:
	ocamllex $<

.PHONY: haxe libs
